// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise
 
    PARTS:
        // Operations for x.
        Not16(in=x, out=notx);  // Invert the x input.
        And16(a=x, b=notx, out=zerox); // And the x input and the inverted x input - output is 0.
        Mux16(a=x, b=zerox, sel=zx, out=x1); // Choose original x or zeroed x - filtered output x1.
        Not16(in=x1, out=notx1); // Invert x1.
        Mux16(a=x1, b=notx1, sel=nx, out=x2); //  Choose original x1 or inverted x1 - filtered output x2.

        // Operations for y - Same as x.
        Not16(in=y, out=noty);
        And16(a=y, b=noty, out=zeroy);
        Mux16(a=y, b=zeroy, sel=zy, out=y1);
        Not16(in=y1, out=noty1);
        Mux16(a=y1, b=noty1, sel=ny, out=y2);

        And16(a=x2, b=y2, out=andx2y2); // And x2 and y2.
        Add16(a=x2, b=y2, out=addx2y2); // Add x2 and y2.
        Mux16(a=andx2y2, b=addx2y2, sel=f, out=o1); // Choose the result of And or Add -- o1
        
        Not16(in=o1, out=o2); // Negate the result -- o2.
        Mux16(a=o1, b=o2, sel=no, out=out); // Choose o1 or o2. Output is out,
        
        // Operations to determine if out is 0
        Mux16(a=o1, b=o2, sel=no, out[0..7]=lout, out[8..15]=hout); // Split the output to two 8-bit buses.
        Or8Way(in=lout, out=z1); // Will output 1 if any of the individual bits is 1.
        Or8Way(in=hout, out=z2); // Will output 1 if any of the individual bits is 1.
        Or(a=z1, b=z2, out=isZr); // Will output 0 only if both z1 and z2 is 0. 
        Not(in=isZr, out=zr); // if isZr is 0, zr is 1 else zr is 0.

        // Operations to determine if out is negative.
        // Check if the most significant bit is 1.
        Mux16(a=o1, b=o2, sel=no, out[0..14]=waste, out[15]=isNg);
        And(a=isNg, b=true, out=ng);
}
